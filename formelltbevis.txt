%============================                                          
%     LaTeX: Simple report template            
%                                          
%                                          
%       Version: Charlotte Hamngren            
%                         2011             
%============================                                          




%================================================================================
%WITH LaTeX - ANYTHING IS POSSIBLE!
%REMEMBER: Google is your friend.
%As you learn more about LaTeX, add or remove packages as you please - make the template YOUR OWN.
%================================================================================




\documentclass[twoside,a4paper,12pt]{article}
%a4paper. If not stated, LaTeX uses american paper size
%12pt is the general text size; if not stated, LaTeX uses 10pt



%You may remove blank lines


%READ THIS READ THIS READ THIS
%READ THIS READ THIS READ THIS
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
%!!!!!!!!!!!!!!!!!!!!--Use utf8 in dd-salarna; latin1 if utf8 doesn't work and applemac if utf doesn't work on a mac--!!!!!!!!!!!!!!!!!
%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
%READ THIS READ THIS READ THIS
%READ THIS READ THIS READ THIS
\usepackage[utf8]        %Insert the right command from above here 
{inputenc}







\usepackage[swedish,english]{babel}%The last language in the list will be used. You can change language at any time, just insert 
%this at the site of the language switch:
%\selectlanguage{WRITE LANGUAGE HERE}


\usepackage{graphicx,        %handling images
psfrag,                    %-ll-
a4%wide                     %a4 is for larger margins; increased readability. In a4wide has narrower margins
,amsmath,                    %improves writing math formulas and their typography
amssymb,                    %-ll-
wasysym,                    %-ll-
fancyhdr,                    %allows you {m-1}to easily customize your page headers and footers
float,                        %allows you to place e.g. graphics \label{eq:10}exactly where you want them; 
                              %http://en.wikibooks.org/wiki/LaTeX/Floats,_Figures_and_Captions
subfigure}                    %provides support for the inclusion of small, �sub�, figures and tables
\usepackage[hang,small,bf]{caption} %provides many ways to customise the captions in floating environments; figure and table
% Valid options (between []) are:
% Indentation: hang, center, centerlast, nooneline
% Size: scriptsize, small, normalsize, large, Large
% Style: up, it, sl, sc, md, bf, rm, sf, tt



%Uncomment in order to get double spacing between lines:
%\usepackage{setspace}
%\doublespacing


\setlength\headheight{15pt}    %Your choice; try changing if your heading text is overlapping or if LaTeX complains
\pagestyle{fancy}            %Available from the fancyhdr package; 
  		    % using the fancy style which allows you to use the header and footer commands.

\bibliographystyle{unsrt}    %A bibliography style that numbers you references in order of appearance
\usepackage{amsmath}
\usepackage{amsthm}
%\usepackage{amsfonts}
\usepackage{verbatim}

\newtheorem{theorem}{Sats}[section]
\newtheorem{definition}[theorem]{Definition}
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{proposition}[theorem]{Proposition}
\newtheorem{corollary}[theorem]{Korollarium}

\DeclareMathOperator*{\grad}{grad}
\DeclareMathOperator*{\modu}{mod}
\DeclareMathOperator*{\toom}{Toom-Cook-\textit{m}\;}
%--------------------------What is above this line is known as the PREAMBLE-----------

%--------------------------Now, the DOCUMENT itself starts------------------------------------
\begin{document}


\selectlanguage{swedish}


\selectlanguage{english}
             % Always compile twice if you have changed much


%\setcounter{secnumdepth}{0}    %States how many numbered subsections that is allowed
%\section{Preface}            %Preface does not have a number preceding it




%\cleardoublepage             %can be used instead of \newpage if you want the new page to be on the right hand side in e.g. 
% a two-sided book/report. This is very useful in the thesis.
\pagenumbering{arabic}        %Arabic (the usual) numbers are used from the Introduction page
\setcounter{page}{1}            %Introdkvoten vid division av $f$ med $x^k$, det vill säga $f/x^k = q$ om $f = q x^k + r$

\setcounter{secnumdepth}{3}    %The sections and subsections are numbered. Three is the maximum depth.

\section{Resultat}
\subsection{Algoritmen för heltal i Haskell}

\subsection{Den formella algoritmen i Coq/Ssreflect}
\label{section:formalg}
Här beskrivs det huvudsakliga resultatet av projektet: den formella implementationen och beviset av Toom-Cook
i Coq/Ssreflect. 
Den fungerar också som en illustration på hur 
definitioner och bevis ser ut och fungerar i Coq/Ssreflect. De viktigaste funktionerna och lemmana till algoritmen
presenteras. Den fullständiga källkoden finns i \ref{appendix:kod}.
\subsubsection{Inledande definitioner och funktioner}
\label{section:forminl}
\subsubsection{Den rekursiva funktionen och huvudfunktionen}
\label{section:formrec}
\subsection{Det formella beviset av algoritmens korrekthet}
Det här avsnittet presenterar det formella beviset för att den implementerade algoritmen är korrekt. Många av 
detaljerna är rent tekniska och utelämnas. Jämförelser görs med det informella beviset i avsnitt 
\ref{informhuvudbevis}. De viktigaste taktikerna som används förklaras under 
bevisets gång. Variablerna $p$ och $q$ betecknar genomgående polynom över ett integritetsområde. 

Beviset använder sig när så är möjligt av redan tidigare bevisade resultat från Ssreflects bibliotek.
En lång rad lemman om bland annat grundläggande egenskaper hos polynom, naturliga tal, matriser och summor 
finns tillgängliga. 

Det formella bevisets struktur är modellerad efter 
pappersbevisets, med ett huvudbevis som bygger på ett flertal lemman. De formella lemmorna är dock 
många fler än de för det informella beviset, 15 jämfört med två. Det beror delvis på att påståenden delats upp 
i flera delpåståenden för att underlätta arbetsfördelningen inom gruppen, men i första hand på att resonemangssteg 
som i pappersbeviset ses som så triviala att de inte ens nämns också måste visas när beviset formaliseras. 
En ytterligare anledning är att det är blir mer hanterbart att göra omskrivningar och deduktionssteg på 
mindre delpåståenden separat.
Dessutom används ett 50-tal mer generella lemman ur $\ssr$-biblioteket och ett par lemman som 
tillhandahållits av projektets handledare, Anders Mörtberg. 

Nedan beskrivs huvudbeviset i detalj, och därefter beskrivs några av de mer intressanta delarna i 
bevisen av lemmorna.
 
\subsubsection{Huvudbeviset}
Detta är den formella motsvarigheten till prop \ref{prop:1} för den implementerade algoritmen. 
\begin{verbatim}
  Lemma toom_cook_correct : forall p q,
  toom_cook p q = p * q.
\end{verbatim}
Eftersom \verb+toom_cook+ bara utvärderar \verb+toom_cook_rec+ med ett visst argument så beror dess korrekthet
helt på att \verb+toom_cook_rec+, är korrekt:
\begin{verbatim}
 Lemma toom_cook_rec_correct : forall (n : nat) p q,
  unitmx V_I -> toom_cook_rec n p q = p * q.
\end{verbatim}
Sedan är beviset för att själva algoritmen, där den rekursiva delen utvärderas med maximum av 
graden av polynomen som argument, 
en direkt följd av det ovanstående lemmat:
\begin{verbatim}
 Lemma toom_cook_correct : forall p q,
   toom_cook p q = p * q.
 Proof. move=> p q. by apply: toom_cook_rec_correct. Qed.
\end{verbatim}
Det formella beviset för att den rekursiva delen av algoritmen är korrekt har en struktur som liknar 
beviset av prop \ref{prop:1}. Den största skillnaden att induktionen i det formella fallet görs över antalet
rekursiva anrop av algoritmen i stället för att som i beviset av prop \ref{prop:1} över graden av 
polynomen som multipliceras. Det beror på att den rekursiva delen av den implementerade algoritmen är 
definierad med en DUMMYVARIABEL n, som beskrivits i \ref{section:formrec}. I stället
för att induktionen bygger på att graden av de polynom som Toom-Cook anropas med minskar bygger den på att
variabeln n minskar. I båda 
fallen innebär dock induktionsantagandet att vi antar att algoritmen fungerar korrekt för nästa rekursiva
anrop. 
Den andra stora skillnaden mellan pappersbeviset och det formella beviset är att många tekniska detaljer, 
som kan tas för givna i ett informellt bevis måste visas explicit. 

\begin{verbatim}
1 Lemma toom_cook_rec_correct : forall (n : nat) p q,
2  unitmx V_I -> toom_cook_rec n p q = p * q.
3 Proof.
4 elim=> [ // | n IHn p q V_inver] /=.
5 set b := exponent m p q.
6 set u := split m b p.
7 set v := split m b q.    
8  case: ifP => [ // | _ ].
9      * have ->:
10      \col_i toom_cook_rec n ((evaluate u) i 0) ((evaluate v) i 0) =
11      \col_i ((evaluate u) i 0 * (evaluate v) i 0).
12       apply/colP => j.
13       by rewrite mxE [X in _ = X]mxE (IH2 _ _ V_inver).
14     rewrite 2!matrix_evaluation.
15     have ->:
16       \col_i ((\col_j u.[inter_points j 0]) i 0 * 
                 (\col_j v.[inter_points j 0]) i 0) =
17       \col_i (u * v).[(inter_points i 0)].
18       apply/colP => k.
19       by rewrite 4!mxE -hornerM.
20     rewrite toom_cook_interpol //; last by apply: size_split_mul.
22     rewrite /recompose hornerM.
23     2?recompose_split //.
24     rewrite /b exponentC.
25     by apply: exp_m_degree.
26     by apply: exp_m_degree.
27 Qed.
\end{verbatim}
Rad \verb+4+ anger med \verb+elim=>+ att beviset kommer göras med induktion över den variabel som står först i 
lemmat, \verb=n=. Basfallet är trivialt precis som i prop \ref{prop:1} eftersom \verb=toom_cook_rec= är 
vanlig multiplikation när n är 0 och delmålet det utgör avslutas direkt med hjälp av \verb=//=.
I induktionssteget som börjar till höger om \verb+|+ instansieras variabeln \verb=n'= där \verb=n' + 1=  = \verb=n=, 
induktionsantagnandet \verb=IHn=, polynomen \verb=p= och \verb=q= och antagandet \verb=V_inver= om att 
interpolationsmatrisen är inverterbar.
Till sist skriver \verb+/=+ om målet genom att utveckla \verb+toom_cook_rec+ till funktionens definition.

Raderna \verb+5+ till \verb+7+ sätter kortare beteckningar på några av uttrycken i målet för att öka bevisets
läslighet. Då har målet och kontexten:
\begin{verbatim}
 n' : nat
 IHn : forall p q, unitmx V_I -> toom_cook_rec n' p q = p * q
 p : {poly R}
 q : {poly R}
 V_inver : unitmx V_I
 b := exponent m p q : nat
 u := split m b p : {poly {poly R}}
 v := split m b q : {poly {poly R}}
 ______________________________________(1/1)
 (if (size p <= 2) || (size q <= 2)
  then p * q
  else
   recompose b
     (interpolate
       (\col_i 
         toom_cook_rec n' ((evaluate u) i 0) ((evaluate v) i 0)))) =
 p * q
\end{verbatim}
\verb=if ... then ... else= - satsen säger att uttrycket i vänsterledet är lika med \verb+p * q+ om graden 
av p eller q är mindre än 2 (eftersom multiplikation i algoritmen då utförs direkt) och annars 
lika med det mer komplicerade uttrycket som står efter \verb+else+. Dessa två uttryck skulle motsvarat
basfallet och induktionssteget om induktionen hade gjort över graden av p och q, som i prop \ref{prop:1}.
Nu görs i stället på rad 6 med \verb=ifP= en falluppdelning över \verb=if ... then ... else=-uttrycket 
som inte ger oss något nytt induktionsantagende.
I det första fallet när \verb+(size p <= 2) || (size q <= 2)+ är höger- och vänsterled i målet trivialt lika 
och löses liksom det triviala målet på rad \verb+4+ direkt med \verb+//+. 
När det är gjort är målet:
\begin{verbatim}
 recompose b
  (interpolate 
    (\col_i 
      toom_cook_rec n' ((evaluate u) i 0) ((evaluate v) i 0))) =
 p * q
\end{verbatim}
och vi vill använda induktionsantagandet 
\begin{verbatim}
 IHn : forall p q, unitmx V_I -> toom_cook_rec n' p q = p * q
\end{verbatim}
och antagandet \verb+V_inver+ om att \verb+V_I+ är inverterbar för att skriva om 
\begin{verbatim}
 toom_cook_rec n' ((evaluate u) i 0) ((evaluate v) i 0)
\end{verbatim}
till \verb=((evaluate u) i 0) * ((evaluate v) i 0)= inne i kolonnvektorn
\begin{verbatim}
\col_i toom_cook_rec n' ((evaluate u) i 0)((evaluate v) i 0)
\end{verbatim}
Eftersom definitionen \verb=\col_i= är låst för beräkning??? i Ssreflect och uttrycket beror av
indexet \verb+i+ i kolonnvektorn kan vi inte direkt skriva om uttrycket, 
se AVSNITT DET OCH DET (DETTA KANSKE ÄR SANT).
Så för att kunna göra det öppnar vi ett nytt delmål med taktiken \verb=have= på rad \verb+9+ där vi bara
arbetar med denna
del av vänsterledet. Där använder vi på rad \verb+12+ lemmat \verb=colP= som låter oss visa att två vektorer 
är lika genom att visa att elementen på motsvarande platser är lika i båda vektorerna. (Då
vektorer är implementerade i SSREFLECT som funktioner från mängden av index till mängden 
av element i vektorn säger lemmat mer specifikt att två vektorer är lika om de extensionellt
sett är samma funktion, dvs om de antar samma värden för samma argument.) På rad \verb+13+
kan vi sedan slutligen skriva om uttrycket med hjälp av induktionshypotesen och målet har då blivit:
\begin{verbatim}
 recompose b 
 (interpolate (\col_i ((evaluate u) i 0 * (evaluate v) i 0))) =
 p * q
\end{verbatim}

Det återstår nu att visa tre saker: För det första att evalueringsfunktionen faktiskt ger tillbaka
en vektor av ett polynoms evaluerat i interpolationspunkterna, för det andra att interpolationsfunktionen
givet dessa vektorer ger oss koefficienterna i produktpolynomet och för det tredje att recompose-funktionen
och split-funktionen under vissa förutsättningar är varandras inverser.

Det första och det andra som ska visas är enkla följder av definitionerna av matrismultiplikation och -invers 
och visas inte explicit i det informella beviset. 
I det formella beviset visas detta i två lemman, \verb=matrix_evaluation= och 
\verb=toom_cook_interpol=, 
som används på rad \verb+14+ respektive rad \verb+15+ till \verb+20+ för att skriva om målet i huvudbeviset till
\begin{verbatim}
 recompose b 
 (interpolate (\col_i (u * v).[inter_points i 0])) = 
 p * q
\end{verbatim}
och sedan till
\begin{verbatim}
 recompose b (u * v) = p * q
\end{verbatim}
Lemmat \verb=toom_cook_interpol= har som 
antagande att graden på det polynom som ska interpoleras,
$u \cdot v$, är mindre än antalet interpolationspunkter, så när det åberopas uppkommer ett till delmål att
visa:
\begin{verbatim}
 ______________________________________(2/3)
 size (u * v) <= number_points
\end{verbatim}
Det görs på rad \verb+20+ genom lemmat \verb=size_split_mul=. Detta är ytterligare något som är 
självklart på pappret, eftersom det är så vi har definiterat $u$ och $v$. 
Vi behöver också visa att interpolationsmatrisen
\verb=V_I= är inverterbar, men eftersom det är ett av antagandena i kontexten är det trivialt 
och visas på rad \verb+20+ med \verb=//=.

Sedan utvecklar vi på rad \verb+22+ definitionen av \verb=recompose= och använder lemmat \verb=hornerM=
som säger att $(p \cdot q)(x) = p(x) \cdot q(x)$, för att skriva om målet till: 
\begin{verbatim}
 u.['X^b] * v.['X^b] = p * q
\end{verbatim}
Då kan vi på rad \verb+23+ använda lemmat \verb=recompose_split=, som motsvarar lemma \ref{lemma:2} i 
pappersbeviset, för att visa att sammansättningen att de uppdelade polynomen genom att evaluera i $x^b$ är
korrekt och därmed skriva om \verb=u.['X^b]= till \verb=p= och \verb=v.['X^b]= till \verb=q=. 
Då har vi visat att vänsterledet i det ursprungliga målet är lika med högerledet \verb+p * q+.

Det som återstår är sedan att bevisa motsvarigheten till Påstående 1 i lemma \ref{lemma:2},
som gör att villkoren för att \verb=recompose_split= ska kunna användas på \verb+p+ och 
\verb+q+ är uppfyllda.
\begin{verbatim}
 ______________________________________(1/2)
 size q <= m * b
 ______________________________________(2/2)
 size p <= m * b
\end{verbatim}
Det görs på rad \verb+25+ till \verb+26+ med lemmat \verb=exp_m_degree= efter att först på rad \verb+24+
ha skrivit om det ena av målet med ett lemma för att funktionen \verb=exponent= är kommutativ, 
vilket avslutar det formella beviset för att Toom Cook ger ett korrekt resultat.

\subsubsection{Lemman till huvudbeviset}

Det här stycket är lite ogenomtänkt än. Jag måste nog se det på papper och få lite
avstånd till det innan jag kommer på vad jag ska ta med.
 Förutom de 50-tal lemman ur \textsc{Ssreflect}-biblioteken som har används i huvudbeviset har 
 ett 15-tal specifika lemman till huvudsatsen formulerats och bevisats.
 Här presenteras några av dem. Det viktigaste lemmat är 
\begin{verbatim}
 Lemma recompose_split : forall (f: {poly R}) (b: nat),
  size f <= m * b ->
  (split m b f).['X^b] = f.
\end{verbatim}
som säger att \verb=recompose= (som evaluerar ett polynom i $x^b$) är vänsterinvers till \verb=split= för polynom
som har tillräckligt låg grad jämfört med argumenten \verb=m= och \verb=b=. 
Lemmat motsvarar ungefär lemma \ref{lemma:2} från efter Påstående 1.
Beviset av \verb=recompose_split= bygger på 5 mindre lemman. \verb=recompose_split_lemma1= används
för att visa \verb=recompose_split_lemma2= som sedan används för att visa \verb=recompose_split_lemma3= 
som används för att visa huvudlemmat tillsammans med motsvarigheten till Påstående 1, som visas separat i 
\begin{verbatim}
 Lemma exp_m_degree_lemma : forall p,
  m > 0 ->
  size p <= m * succn (size p %/ m).
\end{verbatim}

Det första lemmat är en specik instans av (\ref{eq:name8}), dvs av att 
\begin{align*}
 a(x)= a(x)  \modu x^b + \left(a(x)/x^b\right) x^b 
\end{align*}.
\begin{verbatim}
 Lemma recompose_split_lemma1 : forall (f: {poly R}) (k b: nat),
  (rmodp (rdivp f 'X^(k*b)) 'X^(b)) * 'X^(k*b) + 
  (rdivp f 'X^(k.+1*b)) * 'X^(k.+1*b) = 
  (rdivp f 'X^(k*b)) * 'X^(k*b).
\end{verbatim}
Det andra lemmat motsvarar att (\ref{eq:name9}) = (\ref{eq:name10}), det vill säga induktionssteget
i \ref{lemma:2}.
\begin{verbatim}
 Lemma recompose_split_lemma2 : forall (f: {poly R}) (k b: nat),
  \big[+%R/0]_(i < k.+1) ((rmodp (rdivp f 'X^(i*b)) 'X^b)*'X^(i*b)) + 
  (rdivp f 'X^(k.+1*b))*'X^(k.+1*b) =
  \big[+%R/0]_(i < k) ((rmodp (rdivp f 'X^(i*b)) 'X^b)*'X^(i*b)) +
                                     (rdivp f 'X^(k*b))*'X^(k*b).
\end{verbatim}

Det tredje lemmat svarar mot att (\ref{eq:name9}) = $p(x)$, så att givet induktionssteget 
\verb=recompose_split_lemma2= och basfallet \verb=recompose_split_lemma1= så gäller
\begin{verbatim}
 Lemma recompose_split_lemma3 : forall (f : {poly R}) (k b : nat),
  \big[+%R/0]_(i < k.+1) ((rmodp (rdivp f 'X^(i*b)) 'X^b)*'X^(i*b)) +
  (rdivp f 'X^(k.+1*b))*'X^(k.+1*b) = f.
\end{verbatim}
Beviset av huvudsatsen byggde detta bygger mer på aritmetiska egenskaper, egenskaper
hos division hos polynom och egenskaper hos summor.

Precis som beviset av huvudsatsen för att visa likhet mellan vektorer får vi här
använda liknande trick för att visa likhet mellan summor genom att visa att motsvarande
term i respektive summa är lika.

\begin{verbatim}
Lemma recompose_split_lemma0 p m n :
  rdivp p ('X^m * 'X^n) = rdivp (rdivp p 'X^m) 'X^n.
Proof.
\end{verbatim}


\bibliographystyle{plain}
\bibliography{formellabeviset}
\end{document}
